import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String N = scanner.nextLine();
        String H = scanner.nextLine();
        int result = countDistinctPermutations(N, H);
        System.out.println(result);
    }

    public static int countDistinctPermutations(String N, String H) {
        Map<Character, Integer> needleCount = new HashMap<>();
        Map<Character, Integer> haystackCount = new HashMap<>();
        int distinctPermutations = 0;

        // Count characters in N
        for (char c : N.toCharArray()) {
            needleCount.put(c, needleCount.getOrDefault(c, 0) + 1);
        }

        // Count characters in the first substring of H
        for (int i = 0; i < N.length(); i++) {
            char c = H.charAt(i);
            haystackCount.put(c, haystackCount.getOrDefault(c, 0) + 1);
        }

        if (needleCount.equals(haystackCount)) {
            distinctPermutations++;
        }

        // Sliding window approach
        for (int i = N.length(); i < H.length(); i++) {
            char outChar = H.charAt(i - N.length());
            char inChar = H.charAt(i);

            // Update haystackCount
            haystackCount.put(outChar, haystackCount.get(outChar) - 1);
            if (haystackCount.get(outChar) == 0) {
                haystackCount.remove(outChar);
            }
            haystackCount.put(inChar, haystackCount.getOrDefault(inChar, 0) + 1);

            if (needleCount.equals(haystackCount)) {
                distinctPermutations++;
            }
        }

        return distinctPermutations;
    }
}
